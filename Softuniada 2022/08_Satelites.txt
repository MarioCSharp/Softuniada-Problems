// 40/100

namespace ConsoleApp17
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    public class Program
    {
        private static Dictionary<string, List<string>> graph;
        private static Dictionary<string, bool> isCenter;
        private static HashSet<string> visited;
        static void Main(string[] args)
        {
            var n = int.Parse(Console.ReadLine());

            graph = new Dictionary<string, List<string>>();
            ReadGraph(n);

            isCenter = new Dictionary<string, bool>();
            visited = new HashSet<string>();

            foreach (var node in graph.Keys)
            {
                BFS(node);
            }

            var minCountOfNodes = int.MaxValue;

            foreach (var node in isCenter.Keys)
            {
                if (graph[node].Count < minCountOfNodes)
                {
                    minCountOfNodes = graph[node].Count;
                }
            }

            var nodeWithMinChildren = graph.FirstOrDefault(x => x.Value.Count == minCountOfNodes);

            HashSet<string> childrenOfTheMinimumNexus = nodeWithMinChildren.Value.ToHashSet();
            childrenOfTheMinimumNexus.Add(nodeWithMinChildren.Key);

            foreach (var node in childrenOfTheMinimumNexus.OrderBy(x => x))
            {
                foreach (var child in graph[node])
                {
                    Console.WriteLine($"{node} <-> {child}");
                }
            }
        }
        private static void BFS(string startNode)
        {
            var queue = new Queue<string>();
            queue.Enqueue(startNode);
            visited.Add(startNode);

            while (queue.Any())
            {
                var node = queue.Dequeue();

                if (IsCenter(node))
                {
                    if (!isCenter.ContainsKey(node))
                    {
                        isCenter.Add(node, true);
                    }
                }

                foreach (var child in graph[node])
                {
                    if (!visited.Contains(child))
                    {
                        queue.Enqueue(child);
                        visited.Add(child);
                    }
                }
            }
        }
        private static bool IsCenter(string node)
        {
            var count = 0;
            foreach (var child in graph[node])
            {
                if (graph[child].Count == 3 && graph[child].Contains(node))
                {
                    count++;
                }
            }

            return count == graph[node].Count;
        }
        private static void ReadGraph(int n)
        {
            for (int i = 0; i < n; i++)
            {
                var input = Console.ReadLine().Split();

                var parrent = input[0];
                var child = input[1];

                if (!graph.ContainsKey(parrent))
                {
                    graph[parrent] = new List<string>() { child };
                }
                else
                {
                    graph[parrent].Add(child);
                }

                if (!graph.ContainsKey(child))
                {
                    graph[child] = new List<string>() { parrent };
                }
                else
                {
                    graph[child].Add(parrent);
                }
            }
        }
    }
}